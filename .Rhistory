library(faraway)
library
library(faraway)
dbinom (5, size = 10, prob = 0.5)
rbinom(10000, size = 10, prob = 0.5)
s=rbinom(10000, size = 10, prob = 0.5)
mean(s)
rnomin(100, 2, 4)
rnorm(100, 5, sd = 4)
plot(rnorm(100, 5, sd=4))
set.seed(0724071015)
x <- rexp(n=500, rate=1)
mean(x)
1/mean(x)
optim(stats)
help(optim)
SS <- function(mu, x)
sq <- NULL
for(i in 1:500)
sq(i) <- (x(i)-mu)^2
I <- matrix(c(4,2,3,-2), nrow=2, ncol=2)
plot(I)
n <- 1
nsamples <- 100
mean(1)
x <- rpois(n, lambda = 5)
mean(x)
y <- matrix(rep(10, 4), 2, 2)
x <- matrix(1:4, 2, 2)
x %*% y
clear
drop (x)
X <- (1, 2, 3, 4)
z <- ("a", "b", "c", "d")
z <- c("a", "b", "c", "d")
for(i in 1:4) {}
for(i in 1:4) {print(x[i])}
for(i seq_along(x)){print(x[i])}
for(i in seq_along(x)){print(x[i])}
for(letter in x) {print(letter)}
for(i in 1:4) {print(x[i])}
for(i in 1:4) {print(z[i])}
for(i seq_along(z)){print(z[i])}
for(i in seq_along(z)){print(z[i])}
for(letter in z) {print(letter)}
a <- matrix(1:6, 2, 3)
for(i in seq_len(nrow(a))){for j in seq_len(ncol(a)){print(x[i, j])}}
for(i in seq_len(nrow(a))){for (j in seq_len(ncol(a)){print(x[i, j])}}
for(i in seq_len(nrow(a))){
for (j in seq_len(ncol(a)){
print(x[i, j])
}
}
for (i in 1:100) {
if (i<=20){
next
}
}
S <- matrix(c(
1,.5,0,
.5,1,0,
0,0,1),3,3);
L <- chol(S)
t(L) %*% L
x <- rnorm(50);
w <- rnorm(50);
z <- rnorm(50);
e <- rnorm(50);
n <- length(x);
cor(cbind(x,w,z))
X <- cbind(x,w,z) %*% L;
cor(X);
t(X) %*% X / n;
var(X);
X <- cbind(1, X[,1:2], X[,2]^2, X[,3]);
X;
cov(X);
cor(X);
t(X) %*% X / n;
dimnames(X)[[2]] <- c("one","x","w","w2","z");
b0 <- 3;
b1 <- -2;
b2 <- 1;
b3 <- -1;
b4 <- 2;
y <- X %*% c(b0,b1,b2,b3,b4) + e;
dat <- data.frame(y,X);
names(dat);
dim(dat);
dat[1:10,]
?lm
m0 <- lm(y ~ x, data=dat);
m0;
summary(m0);
plot(m0);
m1 <- lm(y ~ x + w, data=dat)
m2 <- lm(y ~ x + w + I(w^2), data=dat)
m3 <- lm(y ~ x + w + I(w^2) + z, data=dat)
ybar <- unlist(lapply(dat,mean))
youtlier <- ybar[1] + 4*sqrt(var(y))
dato <- rbind(dat,c(youtlier,unlist(lapply(dat,mean))[-1]))
m3o <- lm(y ~ x + w + I(w^2) + z, data=dato)
m3o
summary(m3o)
plot(m1)
plot(m2)
plot(m3)
plot(m3o)
?formula
ybar <- unlist(lapply(dat,mean))
range(X[,2])
xoutlier <- ybar[1] + b1*4*max(X[,2])
datox <- rbind(dat,c(xoutlier,1,4*max(X[,2]),unlist(lapply(dat,mean))[-(1:3)]))
summary(m2)
xoutlier
ybar <- unlist(lapply(dat,mean));
range(X[,2]);
xoutlier <- ybar[1] + b1*4*max(X[,2]);
datox <- rbind(dat,c(xoutlier,1,4*max(X[,2]),unlist(lapply(dat,mean))[-(1:3)]))
xoutlier
m3ox <- lm(y ~ x + w + I(w^2) + z, data=datox)
m3ox
summary(m3ox)
plot(m3ox)
library(boot)
x <- rnorm(30,5);
y <- rnorm(30,5)
dat <- data.frame(x,y);
dat
r <- sum(dat$x)/sum(dat$y);
r
fVr <- function(x,y) {
mux <- mean(x);
vx <- var(x);
muy <- mean(y);
vy <- var(y);
cxy <- cov(x,y);
vr <- vx/muy^2 + vy*mux^2/muy^4 - 2*cxy*mux/muy^3;  # variance of r
vr
}
SEr <- sqrt(fVr(dat$x, dat$y));
SEr;
r;
CI95 <- r + c(-1,1)*qnorm(.975)*SEr;  # 95% CI
CI95;
f0 <- function(data,idx) {
idata <- data[idx,];    # resample entire data vector
r <- sum(idata$x)/sum(idata$y);  # ratio
vr <- fVr(idata$x,idata$y);
c(r,vr)
}
boot.out0 <- boot(dat,f0,1000);  # run bootstrap resamples
boot.out0;
vt0 <- SEr^2;                    # full sample variance of r
boot.ci(boot.out0, var.t0=vt0)
CI95
x <- rnorm(15,5);
y <- rnorm(15,5);
dat <- data.frame(x,y);
# ratio
r <- sum(dat$x)/sum(dat$y);
r;
SEr <- sqrt(fVr(dat$x, dat$y));
SEr;
CI95 <- r + c(-1,1)*qnorm(.975)*SEr;  # 95% CI
boot.out0 <- boot(dat,f0,1000);  # run bootstrap resamples
boot.out0;                       # crude summary of bootstrap resamples
vt0 <- SEr^2;                    # full sample variance of r
boot.ci(boot.out0, var.t0=vt0);  # show various bootstrap CIs
CI95;    # No
a <- [1:1000]
a<- (1:1000)
for(i in 1:1000) {}
def getSum():
sum = 0
for x in range(1, 1000):
if x % 3 == 0 or x % 5 == 0:
sum += x
return sum
for (i in 1:1000){
if (i %% 3 == 0 || i %% 5 == 0) {x.1[i] <- i} else {x.1[i] <- 0}}
y.1 <- x.1[x.1 != 0]
sum(y.1)
m35 = function(n) sum(unique(c(
seq(3, n-1, by = 3), seq(5, n-1, by = 5))))
m35(1000)
x.1 <- rep(NA, 1000)
for (i in 1:1000){
if (i %% 3 == 0 || i %% 5 == 0) {x.1[i] <- i} else {x.1[i] <- 0}}
y.1 <- x.1[x.1 != 0]
sum(y.1)
x.1 <- rep(NA, 999)
for (i in 1:999){
if (i %% 3 == 0 || i %% 5 == 0) {x.1[i] <- i} else {x.1[i] <- 0}}
y.1 <- x.1[x.1 != 0]
sum(y.1)
fibonacci <- numeric()
fibonacci[1] <- 1
fibonacci[2] <- 2
i <- 3
repeat {
fibonacci[i] <- fibonacci[i-1] + fibonacci[i-2]
if (fibonacci[i] > 4e6) break
i <- i + 1
}
# calculate the sum
fibonacci <- fibonacci[-length(fibonacci)]   # remove the last term
flag <- fibonacci %% 2 == 0  # find the indexes of even numbers
result <- sum(fibonacci[flag])
cat("The result is:", result, "\n")
setwd("C:/Users/노현영/hyro324-514_homework")
